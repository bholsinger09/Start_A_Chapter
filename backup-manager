#!/bin/bash

# Backup Management System for Campus Chapter Organizer
# Main entry point for all backup and restore operations

set -e

PROJECT_ROOT="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
BACKUP_SCRIPT="$PROJECT_ROOT/scripts/backup/create-backup.sh"
RESTORE_SCRIPT="$PROJECT_ROOT/scripts/backup/restore-backup.sh"
SCHEDULER_SCRIPT="$PROJECT_ROOT/scripts/backup/setup-scheduler.sh"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

print_banner() {
    echo -e "${PURPLE}"
    echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
    echo "‚ïë              Campus Chapter Organizer                       ‚ïë"
    echo "‚ïë                Backup Management System                      ‚ïë"
    echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
    echo -e "${NC}"
}

log() {
    echo -e "${BLUE}[$(date '+%Y-%m-%d %H:%M:%S')]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1" >&2
}

success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

# Show system status
show_dashboard() {
    print_banner
    
    log "=== System Dashboard ==="
    echo
    
    # Scheduler Status
    echo -e "${CYAN}üìÖ Backup Scheduler:${NC}"
    if [[ "$OSTYPE" == "darwin"* ]]; then
        # Check LaunchAgent on macOS
        if launchctl list | grep -q "com.turningpoint.chapterorganizer.backup"; then
            echo "   ‚úÖ Automatic backups ENABLED (LaunchAgent)"
        else
            echo "   ‚ùå Automatic backups DISABLED"
        fi
    else
        # Check cron on Linux/Unix
        if crontab -l 2>/dev/null | grep -q "$BACKUP_SCRIPT"; then
            echo "   ‚úÖ Automatic backups ENABLED (Cron)"
        else
            echo "   ‚ùå Automatic backups DISABLED"
        fi
    fi
    
    # Application Status
    echo -e "${CYAN}üöÄ Application Status:${NC}"
    if curl -s http://localhost:8080/actuator/health > /dev/null 2>&1; then
        echo "   ‚úÖ Main application RUNNING (http://localhost:8080)"
    else
        echo "   ‚ùå Main application STOPPED"
    fi
    
    if curl -s http://localhost:8082/actuator/health > /dev/null 2>&1; then
        echo "   ‚úÖ Restore environment RUNNING (http://localhost:8082)"
    else
        echo "   ‚≠ï Restore environment STOPPED"
    fi
    
    # Recent Backups
    echo -e "${CYAN}üíæ Recent Backups:${NC}"
    local backup_count=0
    local snapshot_count=0
    
    if [ -d "$PROJECT_ROOT/backups/database" ]; then
        backup_count=$(ls -1 "$PROJECT_ROOT/backups/database" 2>/dev/null | wc -l)
    fi
    
    if [ -d "$PROJECT_ROOT/backups/snapshots" ]; then
        snapshot_count=$(ls -1 "$PROJECT_ROOT/backups/snapshots" 2>/dev/null | wc -l)
    fi
    
    echo "   üìä Database backups: $backup_count"
    echo "   üì∏ Site snapshots: $snapshot_count"
    
    if [ "$backup_count" -gt 0 ]; then
        echo "   üïê Recent database backups:"
        ls -lt "$PROJECT_ROOT/backups/database" 2>/dev/null | head -n 2 | while read -r line; do
            echo "      $(echo "$line" | awk '{print $9, $6, $7, $8}')"
        done
    fi
    
    if [ "$snapshot_count" -gt 0 ]; then
        echo "   ÔøΩ Recent snapshots:"
        ls -lt "$PROJECT_ROOT/backups/snapshots" 2>/dev/null | head -n 2 | while read -r line; do
            echo "      $(echo "$line" | awk '{print $9, $6, $7, $8}')"
        done
    fi
    
    if [ "$backup_count" -eq 0 ] && [ "$snapshot_count" -eq 0 ]; then
        echo "   üìä No backups found"
    fi
    
    # Disk Usage
    echo -e "${CYAN}üíø Disk Usage:${NC}"
    if [ -d "$PROJECT_ROOT/backups" ]; then
        local backup_size=$(du -sh "$PROJECT_ROOT/backups" 2>/dev/null | cut -f1)
        echo "   üìÅ Backup directory size: $backup_size"
    fi
    
    echo
    echo -e "${YELLOW}üí° Quick Actions:${NC}"
    echo "   ./backup-manager create           - Create complete backup (db + snapshot)"
    echo "   ./backup-manager create database  - Create database backup only"
    echo "   ./backup-manager create snapshot  - Create site snapshot only"
    echo "   ./backup-manager restore          - Restore from any backup/snapshot"
    echo "   ./backup-manager schedule         - Setup automatic backups"
    echo "   ./backup-manager help             - Show all commands"
    echo
}

# Create backup now
create_backup_now() {
    local backup_type="${1:-both}"
    case "$backup_type" in
        "database"|"db")
            log "Creating database backup only..."
            "$BACKUP_SCRIPT" database
            ;;
        "snapshot"|"site")
            log "Creating site snapshot only..."
            "$BACKUP_SCRIPT" snapshot
            ;;
        "both"|"complete"|"")
            log "Creating complete backup (database + snapshot)..."
            "$BACKUP_SCRIPT" both
            ;;
        *)
            error "Unknown backup type: $backup_type"
            echo "Valid types: database, snapshot, both"
            exit 1
            ;;
    esac
}

# Interactive restore
interactive_restore() {
    log "Starting interactive restore process..."
    
    # Ask user what type of restore they want
    echo "Select restore type:"
    echo "1. Database restore (traditional restore environment)"
    echo "2. Site snapshot (complete site deployment)"
    echo "3. List all backups and choose"
    echo -n "Enter choice (1-3): "
    read -r choice
    
    case "$choice" in
        "1")
            "$RESTORE_SCRIPT" restore
            ;;
        "2")
            "$PROJECT_ROOT/scripts/backup/deploy-snapshot.sh" deploy
            ;;
        "3")
            "$RESTORE_SCRIPT" list
            echo
            echo "For database restore, use: ./backup-manager restore <backup_name>"
            echo "For snapshot deployment, use: ./backup-manager deploy <snapshot_name>"
            ;;
        *)
            error "Invalid choice: $choice"
            ;;
    esac
}

# List backups
list_backups() {
    log "Listing available backups..."
    "$RESTORE_SCRIPT" list
}

# Setup scheduler
setup_scheduler() {
    log "Setting up automatic backup scheduler..."
    "$SCHEDULER_SCRIPT" install
}

# Show scheduler status
scheduler_status() {
    "$SCHEDULER_SCRIPT" status
}

# Show logs
show_logs() {
    local lines="${1:-50}"
    log "Showing backup logs (last $lines lines)..."
    "$SCHEDULER_SCRIPT" logs "$lines"
}

# Stop restore environment
stop_restore() {
    log "Stopping restore environment..."
    "$RESTORE_SCRIPT" stop
}

# Show restore status
restore_status() {
    "$RESTORE_SCRIPT" status
}

# Quick setup - installs everything needed
quick_setup() {
    print_banner
    log "=== Quick Setup - Backup System Installation ==="
    echo
    
    log "1. Setting up backup directories..."
    mkdir -p "$PROJECT_ROOT/backups/database"
    mkdir -p "$PROJECT_ROOT/backups/metadata"
    
    log "2. Creating initial backup..."
    "$BACKUP_SCRIPT" || warning "Initial backup failed (application may not be running)"
    
    log "3. Installing automatic backup scheduler..."
    "$SCHEDULER_SCRIPT" install
    
    log "4. Testing restore functionality..."
    if [ -d "$PROJECT_ROOT/backups/database" ] && [ -n "$(ls -A "$PROJECT_ROOT/backups/database" 2>/dev/null)" ]; then
        success "Backup system is ready!"
    else
        warning "No backups found - make sure your application is running"
    fi
    
    echo
    success "=== Quick Setup Complete ==="
    success "‚úÖ Automatic backups every 30 minutes"
    success "‚úÖ Backup and restore scripts ready"
    success "‚úÖ Run './backup-manager dashboard' to see system status"
}

# Show detailed help
show_help() {
    print_banner
    
    cat << EOF
Campus Chapter Organizer - Backup Management System

USAGE:
    ./backup-manager [COMMAND] [OPTIONS]

COMMANDS:
    dashboard              Show system status dashboard
    create [type]          Create backup: 'database', 'snapshot', or 'both' (default)
    restore [backup_name]  Restore from backup/snapshot (interactive if no name)
    deploy [snapshot_name] Deploy site snapshot (interactive if no name)
    list                   List all available backups and snapshots
    snapshots              List available site snapshots
    
    schedule               Setup automatic backups (every 30 minutes)
    status                 Show scheduler and restore environment status
    logs [lines]           Show backup logs (default: 50 lines)
    
    stop [name]            Stop restore environment or snapshot deployment
    cleanup                Remove old backups and temporary files
    
    setup                  Quick setup - install everything
    help                   Show this help message

EXAMPLES:
    ./backup-manager dashboard
    ./backup-manager create                    # Complete backup (database + snapshot)
    ./backup-manager create database          # Database only
    ./backup-manager create snapshot          # Site snapshot only
    ./backup-manager restore
    ./backup-manager restore snapshot_20250121_1430
    ./backup-manager list
    ./backup-manager schedule
    ./backup-manager logs 100
    ./backup-manager setup

BACKUP SYSTEM OVERVIEW:
    ‚Ä¢ TWO TYPES OF BACKUPS:
      - Database: Just the data (small, fast)
      - Snapshots: Complete site (code + data + configs, larger)
    ‚Ä¢ Automatic backups every 30 minutes when scheduled
    ‚Ä¢ Database backups: ./backups/database/
    ‚Ä¢ Site snapshots: ./backups/snapshots/
    ‚Ä¢ Metadata: ./backups/metadata/
    ‚Ä¢ Restore creates isolated Docker environment with exact code version
    ‚Ä¢ Main app: http://localhost:8080 (frontend: 3000)
    ‚Ä¢ Restored snapshots: Dynamic ports (check logs for URLs)

PORTS USED:
    Main Environment:
    - Application: 8080
    - Frontend: 3000
    - Database: 5432 (if PostgreSQL)
    
    Restore Environment:
    - Application: 8082
    - Frontend: 3002
    - Database: 5433
    - Adminer: 8083

For more information, check the scripts in ./scripts/backup/
EOF
}

# Clean up old files and temporary resources
cleanup() {
    log "=== Cleanup Process ==="
    
    # Stop restore environment
    "$RESTORE_SCRIPT" stop 2>/dev/null || true
    
    # Clean up Docker resources
    log "Cleaning up Docker resources..."
    docker system prune -f 2>/dev/null || true
    
    # Remove temporary restore files
    rm -f "$PROJECT_ROOT/docker-compose.restore.yml"
    rm -f "$PROJECT_ROOT/src/main/resources/application-restore.properties"
    
    success "Cleanup completed"
}

# Main execution
main() {
    local command="${1:-dashboard}"
    
    case "$command" in
        "dashboard"|"status"|"")
            show_dashboard
            ;;
        "create"|"backup")
            create_backup_now "$2"
            ;;
        "restore")
            if [ -n "$2" ]; then
                "$RESTORE_SCRIPT" restore "$2"
            else
                interactive_restore
            fi
            ;;
        "list"|"ls")
            list_backups
            ;;
        "deploy")
            "$PROJECT_ROOT/scripts/backup/deploy-snapshot.sh" deploy "$2"
            ;;
        "snapshots")
            "$PROJECT_ROOT/scripts/backup/deploy-snapshot.sh" list
            ;;
        "schedule")
            setup_scheduler
            ;;
        "logs")
            show_logs "$2"
            ;;
        "stop")
            if [ -n "$2" ] && [[ "$2" == snapshot_* ]]; then
                "$PROJECT_ROOT/scripts/backup/deploy-snapshot.sh" stop "$2"
            else
                stop_restore
            fi
            ;;
        "cleanup")
            cleanup
            "$PROJECT_ROOT/scripts/backup/deploy-snapshot.sh" cleanup
            ;;
        "setup")
            quick_setup
            ;;
        "help"|"-h"|"--help")
            show_help
            ;;
        *)
            error "Unknown command: $command"
            echo "Run './backup-manager help' for usage information"
            exit 1
            ;;
    esac
}

# Run main function if script is executed directly
if [ "${BASH_SOURCE[0]}" = "${0}" ]; then
    main "$@"
fi