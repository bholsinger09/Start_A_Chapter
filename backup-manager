#!/bin/bash

# Backup Management System for Campus Chapter Organizer
# Main entry point for all backup and restore operations

set -e

PROJECT_ROOT="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
BACKUP_SCRIPT="$PROJECT_ROOT/scripts/backup/create-backup.sh"
RESTORE_SCRIPT="$PROJECT_ROOT/scripts/backup/restore-backup.sh"
SCHEDULER_SCRIPT="$PROJECT_ROOT/scripts/backup/setup-scheduler.sh"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

print_banner() {
    echo -e "${PURPLE}"
    echo "╔══════════════════════════════════════════════════════════════╗"
    echo "║              Campus Chapter Organizer                       ║"
    echo "║                Backup Management System                      ║"
    echo "╚══════════════════════════════════════════════════════════════╝"
    echo -e "${NC}"
}

log() {
    echo -e "${BLUE}[$(date '+%Y-%m-%d %H:%M:%S')]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1" >&2
}

success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

# Show system status
show_dashboard() {
    print_banner
    
    log "=== System Dashboard ==="
    echo
    
    # Scheduler Status
    echo -e "${CYAN}📅 Backup Scheduler:${NC}"
    if [[ "$OSTYPE" == "darwin"* ]]; then
        # Check LaunchAgent on macOS
        if launchctl list | grep -q "com.turningpoint.chapterorganizer.backup"; then
            echo "   ✅ Automatic backups ENABLED (LaunchAgent)"
        else
            echo "   ❌ Automatic backups DISABLED"
        fi
    else
        # Check cron on Linux/Unix
        if crontab -l 2>/dev/null | grep -q "$BACKUP_SCRIPT"; then
            echo "   ✅ Automatic backups ENABLED (Cron)"
        else
            echo "   ❌ Automatic backups DISABLED"
        fi
    fi
    
    # Application Status
    echo -e "${CYAN}🚀 Application Status:${NC}"
    if curl -s http://localhost:8080/actuator/health > /dev/null 2>&1; then
        echo "   ✅ Main application RUNNING (http://localhost:8080)"
    else
        echo "   ❌ Main application STOPPED"
    fi
    
    if curl -s http://localhost:8082/actuator/health > /dev/null 2>&1; then
        echo "   ✅ Restore environment RUNNING (http://localhost:8082)"
    else
        echo "   ⭕ Restore environment STOPPED"
    fi
    
    # Recent Backups
    echo -e "${CYAN}💾 Recent Backups:${NC}"
    local backup_count=0
    if [ -d "$PROJECT_ROOT/backups/database" ]; then
        backup_count=$(ls -1 "$PROJECT_ROOT/backups/database" 2>/dev/null | wc -l)
        if [ "$backup_count" -gt 0 ]; then
            echo "   📊 Total backups: $backup_count"
            echo "   🕐 Recent backups:"
            ls -lt "$PROJECT_ROOT/backups/database" 2>/dev/null | head -n 3 | while read -r line; do
                echo "      $(echo "$line" | awk '{print $9, $6, $7, $8}')"
            done
        else
            echo "   📊 No backups found"
        fi
    else
        echo "   📊 Backup directory not found"
    fi
    
    # Disk Usage
    echo -e "${CYAN}💿 Disk Usage:${NC}"
    if [ -d "$PROJECT_ROOT/backups" ]; then
        local backup_size=$(du -sh "$PROJECT_ROOT/backups" 2>/dev/null | cut -f1)
        echo "   📁 Backup directory size: $backup_size"
    fi
    
    echo
    echo -e "${YELLOW}💡 Quick Actions:${NC}"
    echo "   ./backup-manager create       - Create backup now"
    echo "   ./backup-manager restore      - Restore from backup"
    echo "   ./backup-manager schedule     - Setup automatic backups"
    echo "   ./backup-manager help         - Show all commands"
    echo
}

# Create backup now
create_backup_now() {
    log "Creating backup now..."
    "$BACKUP_SCRIPT"
}

# Interactive restore
interactive_restore() {
    log "Starting interactive restore process..."
    "$RESTORE_SCRIPT" restore
}

# List backups
list_backups() {
    log "Listing available backups..."
    "$RESTORE_SCRIPT" list
}

# Setup scheduler
setup_scheduler() {
    log "Setting up automatic backup scheduler..."
    "$SCHEDULER_SCRIPT" install
}

# Show scheduler status
scheduler_status() {
    "$SCHEDULER_SCRIPT" status
}

# Show logs
show_logs() {
    local lines="${1:-50}"
    log "Showing backup logs (last $lines lines)..."
    "$SCHEDULER_SCRIPT" logs "$lines"
}

# Stop restore environment
stop_restore() {
    log "Stopping restore environment..."
    "$RESTORE_SCRIPT" stop
}

# Show restore status
restore_status() {
    "$RESTORE_SCRIPT" status
}

# Quick setup - installs everything needed
quick_setup() {
    print_banner
    log "=== Quick Setup - Backup System Installation ==="
    echo
    
    log "1. Setting up backup directories..."
    mkdir -p "$PROJECT_ROOT/backups/database"
    mkdir -p "$PROJECT_ROOT/backups/metadata"
    
    log "2. Creating initial backup..."
    "$BACKUP_SCRIPT" || warning "Initial backup failed (application may not be running)"
    
    log "3. Installing automatic backup scheduler..."
    "$SCHEDULER_SCRIPT" install
    
    log "4. Testing restore functionality..."
    if [ -d "$PROJECT_ROOT/backups/database" ] && [ -n "$(ls -A "$PROJECT_ROOT/backups/database" 2>/dev/null)" ]; then
        success "Backup system is ready!"
    else
        warning "No backups found - make sure your application is running"
    fi
    
    echo
    success "=== Quick Setup Complete ==="
    success "✅ Automatic backups every 30 minutes"
    success "✅ Backup and restore scripts ready"
    success "✅ Run './backup-manager dashboard' to see system status"
}

# Show detailed help
show_help() {
    print_banner
    
    cat << EOF
Campus Chapter Organizer - Backup Management System

USAGE:
    ./backup-manager [COMMAND] [OPTIONS]

COMMANDS:
    dashboard              Show system status dashboard
    create                 Create a backup right now
    restore [backup_name]  Restore from backup (interactive if no name)
    list                   List all available backups
    
    schedule               Setup automatic backups (every 30 minutes)
    status                 Show scheduler and restore environment status
    logs [lines]           Show backup logs (default: 50 lines)
    
    stop                   Stop restore environment
    cleanup                Remove old backups and temporary files
    
    setup                  Quick setup - install everything
    help                   Show this help message

EXAMPLES:
    ./backup-manager dashboard
    ./backup-manager create
    ./backup-manager restore
    ./backup-manager restore h2_backup_20250121_1430
    ./backup-manager list
    ./backup-manager schedule
    ./backup-manager logs 100
    ./backup-manager setup

BACKUP SYSTEM OVERVIEW:
    • Automatic backups every 30 minutes when scheduled
    • Backups stored in: ./backups/database/
    • Metadata stored in: ./backups/metadata/
    • Restore creates isolated Docker environment on different ports
    • Main app: http://localhost:8080 (frontend: 3000)
    • Restore app: http://localhost:8082 (frontend: 3002)

PORTS USED:
    Main Environment:
    - Application: 8080
    - Frontend: 3000
    - Database: 5432 (if PostgreSQL)
    
    Restore Environment:
    - Application: 8082
    - Frontend: 3002
    - Database: 5433
    - Adminer: 8083

For more information, check the scripts in ./scripts/backup/
EOF
}

# Clean up old files and temporary resources
cleanup() {
    log "=== Cleanup Process ==="
    
    # Stop restore environment
    "$RESTORE_SCRIPT" stop 2>/dev/null || true
    
    # Clean up Docker resources
    log "Cleaning up Docker resources..."
    docker system prune -f 2>/dev/null || true
    
    # Remove temporary restore files
    rm -f "$PROJECT_ROOT/docker-compose.restore.yml"
    rm -f "$PROJECT_ROOT/src/main/resources/application-restore.properties"
    
    success "Cleanup completed"
}

# Main execution
main() {
    local command="${1:-dashboard}"
    
    case "$command" in
        "dashboard"|"status"|"")
            show_dashboard
            ;;
        "create"|"backup")
            create_backup_now
            ;;
        "restore")
            if [ -n "$2" ]; then
                "$RESTORE_SCRIPT" restore "$2"
            else
                interactive_restore
            fi
            ;;
        "list"|"ls")
            list_backups
            ;;
        "schedule")
            setup_scheduler
            ;;
        "logs")
            show_logs "$2"
            ;;
        "stop")
            stop_restore
            ;;
        "cleanup")
            cleanup
            ;;
        "setup")
            quick_setup
            ;;
        "help"|"-h"|"--help")
            show_help
            ;;
        *)
            error "Unknown command: $command"
            echo "Run './backup-manager help' for usage information"
            exit 1
            ;;
    esac
}

# Run main function if script is executed directly
if [ "${BASH_SOURCE[0]}" = "${0}" ]; then
    main "$@"
fi